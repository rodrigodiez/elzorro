// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import service "github.com/rodrigodiez/zorro/pkg/service"

// Zorro is an autogenerated mock type for the Zorro type
type Zorro struct {
	mock.Mock
}

// Mask provides a mock function with given fields: _a0
func (_m *Zorro) Mask(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unmask provides a mock function with given fields: _a0
func (_m *Zorro) Unmask(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithMetrics provides a mock function with given fields: _a0
func (_m *Zorro) WithMetrics(_a0 *service.Metrics) service.Zorro {
	ret := _m.Called(_a0)

	var r0 service.Zorro
	if rf, ok := ret.Get(0).(func(*service.Metrics) service.Zorro); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Zorro)
		}
	}

	return r0
}
